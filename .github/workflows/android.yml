name: Android CI/CD via Bitrise

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
  workflow_dispatch:
  release:
    types: [published]

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant Permission to Execute Gradle
        run: chmod +x ./gradlew

     #- name: Run Lint Checks
     #   run: ./gradlew lint
     #   continue-on-error: true

     # - name: Run Unit Tests
     #   run: ./gradlew test

  trigger-bitrise:
    name: Trigger Bitrise Build
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Debug API Token & App Slug
        run: |
          echo "Checking API Token Length: ${#BITRISE_API_TOKEN}"
          echo "Checking App Slug Length: ${#BITRISE_APP_SLUG}"
        env:
          BITRISE_API_TOKEN: ${{ secrets.BITRISE_API_TOKEN }}
          BITRISE_APP_SLUG: ${{ secrets.BITRISE_APP_SLUG }}

      - name: Trigger Bitrise Build
        run: |
          BITRISE_BUILD_URL="https://api.bitrise.io/v0.1/apps/${{ secrets.BITRISE_APP_SLUG }}/builds"
      
          RESPONSE=$(curl -s -X POST "$BITRISE_BUILD_URL" \
            -H "Authorization: ${{ secrets.BITRISE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "hook_info": { "type": "bitrise" },
              "build_params": {
                "branch": "main",
                "workflow_id": "build_apk"
              },
              "triggered_by": "GitHub Actions"
            }')
      
          # Debug: Print API response
          echo "Raw API Response: $RESPONSE"
      
          # Validate JSON format
          if ! echo "$RESPONSE" | jq empty; then
            echo "Error: API Response is not valid JSON"
            exit 1
          fi
      
          BUILD_ID=$(echo "$RESPONSE" | jq -r '.results[0].build_slug')
      
          if [[ -z "$BUILD_ID" || "$BUILD_ID" == "null" ]]; then
            echo "Error: Failed to trigger build... API Response: $RESPONSE"
            exit 1
          fi
      
          echo "Triggered Bitrise Build ID: $BUILD_ID"
      
          # Output build ID for next steps
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV



      - name: Wait for Bitrise Build to Complete
        run: |
          # Wait for Bitrise build to complete
          BITRISE_BUILD_STATUS_URL="https://api.bitrise.io/v0.1/apps/${{ secrets.BITRISE_APP_SLUG }}/builds/$BUILD_ID"
          
          while true; do
              RESPONSE=$(curl -s -X GET "$BITRISE_BUILD_STATUS_URL" \
                -H "Authorization: ${{ secrets.BITRISE_API_TOKEN }}")
          
              # Debug: Print API response
              echo "Raw Build Status - API Response: $RESPONSE"
          
              # Check if JSON is valid
              if ! echo "$RESPONSE" | jq empty; then
                echo "Error: Invalid JSON response from Bitrise API"
                exit 1
              fi
          
              # Extract build status
              BUILD_STATUS=$(echo "$RESPONSE" | jq -r '.data.status')
          
              if [[ "$BUILD_STATUS" == "1" ]]; then
                echo "Build succeeded!"
                break
              elif [[ "$BUILD_STATUS" == "2" ]]; then
                echo "Build failed!"
                exit 1
              else
                echo "Build is still in progress..."
                sleep 30  # Wait before checking again
              fi
          done





  release:
    name: Deploy Release (Firebase App Distribution)
    needs: trigger-bitrise
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Set Up Firebase Authentication
        run: |
          echo '${{ secrets.BITRISE_FIREBASE_SERVICE_ACCOUNT }}' > firebase.json
          export GOOGLE_APPLICATION_CREDENTIALS=firebase.json

      - name: Get Bitrise Build Slug
        run: |
          BITRISE_BUILD_URL="https://api.bitrise.io/v0.1/apps/${{ secrets.BITRISE_APP_SLUG }}/builds"
      
          RESPONSE=$(curl -s -L -X POST "$BITRISE_BUILD_URL" \
            -H "Authorization: ${{ secrets.BITRISE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "hook_info": { "type": "bitrise" },
              "build_params": {
                "branch": "main",
                "workflow_id": "build_apk"
              },
              "triggered_by": "GitHub Actions"
            }')
      
          echo "Raw API Response: $RESPONSE"
      
          # Validate JSON format
          if ! echo "$RESPONSE" | jq empty; then
            echo "Error: API Response is not valid JSON"
            exit 1
          fi
      
          # Correctly extract build_slug from the results array
          BUILD_ID=$(echo "$RESPONSE" | jq -r '.results[0].build_slug')
      
          if [[ -z "$BUILD_ID" || "$BUILD_ID" == "null" ]]; then
            echo "Error: Failed to retrieve build ID. API Response: $RESPONSE"
            exit 1
          fi
      
          echo "Triggered Bitrise Build ID: $BUILD_ID"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV



      - name: Download APK from Bitrise
        run: |
          BITRISE_ARTIFACT_URL="https://api.bitrise.io/v0.1/apps/${{ secrets.BITRISE_APP_SLUG }}/builds/${{ env.BUILD_ID }}/artifacts/${{ env.ARTIFACT_SLUG }}"
          
          DOWNLOAD_URL=$(curl -s -X GET "$BITRISE_ARTIFACT_URL" \
            -H "Authorization: ${{ secrets.BITRISE_API_TOKEN }}" | jq -r '.data.expiring_download_url')
      
          if [[ -z "$DOWNLOAD_URL" || "$DOWNLOAD_URL" == "null" ]]; then
            echo "Error: Failed to retrieve APK download URL"
            exit 1
          fi
      
          curl -o app-release.apk "$DOWNLOAD_URL"
          echo "APK downloaded: app-release.apk"

      - name: Upload APK to Firebase App Distribution
        run: |
          firebase appdistribution:distribute "app-release.apk" \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups testers \
            --release-notes "New release from CI/CD"


